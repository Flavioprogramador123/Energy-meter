# deploy_vercel.ps1
# Script para deploy autom√°tico no Vercel

Write-Host "üöÄ Deploy Autom√°tico para Vercel - Energy Meter Master" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Cyan

# Verificar se est√° na pasta correta
$currentPath = Get-Location
Write-Host "üìÅ Pasta atual: $currentPath" -ForegroundColor Yellow

# Verificar se √© a pasta do projeto
if (-not (Test-Path "app\main.py")) {
    Write-Host "‚ùå Erro: N√£o est√° na pasta do projeto!" -ForegroundColor Red
    Write-Host "   Execute este script na pasta: C:\Projetos\pieng-energy-meter" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Pasta do projeto encontrada!" -ForegroundColor Green

# Verificar se o Vercel CLI est√° instalado
Write-Host "`nüîç Verificando Vercel CLI..." -ForegroundColor Yellow
try {
    $vercelVersion = vercel --version 2>$null
    if ($vercelVersion) {
        Write-Host "‚úÖ Vercel CLI encontrado: $vercelVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Vercel CLI n√£o encontrado!" -ForegroundColor Red
        Write-Host "   Instalando Vercel CLI..." -ForegroundColor Yellow
        
        # Instalar Vercel CLI
        npm install -g vercel
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Vercel CLI instalado com sucesso!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Falha ao instalar Vercel CLI!" -ForegroundColor Red
            exit 1
        }
    }
} catch {
    Write-Host "‚ùå Erro ao verificar Vercel CLI: $_" -ForegroundColor Red
    exit 1
}

# Verificar se est√° logado no Vercel
Write-Host "`nüîê Verificando login no Vercel..." -ForegroundColor Yellow
try {
    $vercelWho = vercel whoami 2>$null
    if ($vercelWho) {
        Write-Host "‚úÖ Logado como: $vercelWho" -ForegroundColor Green
    } else {
        Write-Host "‚ùå N√£o est√° logado no Vercel!" -ForegroundColor Red
        Write-Host "   Fazendo login..." -ForegroundColor Yellow
        
        # Fazer login no Vercel
        vercel login
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Login realizado com sucesso!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Falha no login!" -ForegroundColor Red
            exit 1
        }
    }
} catch {
    Write-Host "‚ùå Erro ao verificar login: $_" -ForegroundColor Red
    exit 1
}

# Verificar se o projeto j√° existe no Vercel
Write-Host "`nüìã Verificando projeto no Vercel..." -ForegroundColor Yellow
try {
    $vercelProjects = vercel ls 2>$null
    if ($vercelProjects -match "pieng-energy-meter") {
        Write-Host "‚úÖ Projeto encontrado no Vercel!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Projeto n√£o encontrado, ser√° criado automaticamente" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel verificar projetos existentes" -ForegroundColor Yellow
}

# Verificar arquivos necess√°rios
Write-Host "`nüìÑ Verificando arquivos necess√°rios..." -ForegroundColor Yellow
$requiredFiles = @(
    "app\main.py",
    "requirements.txt",
    "vercel.json",
    "api\index.py"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file n√£o encontrado!" -ForegroundColor Red
        exit 1
    }
}

# Verificar se h√° altera√ß√µes n√£o commitadas
Write-Host "`nüìù Verificando status do Git..." -ForegroundColor Yellow
try {
    $gitStatus = git status --porcelain 2>$null
    if ($gitStatus) {
        Write-Host "‚ö†Ô∏è H√° altera√ß√µes n√£o commitadas:" -ForegroundColor Yellow
        Write-Host $gitStatus -ForegroundColor Yellow
        
        $commit = Read-Host "Deseja fazer commit antes do deploy? (s/n)"
        if ($commit -eq "s" -or $commit -eq "S") {
            Write-Host "üìù Fazendo commit..." -ForegroundColor Yellow
            git add .
            git commit -m "Deploy autom√°tico para Vercel"
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Commit realizado!" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Falha no commit!" -ForegroundColor Red
                exit 1
            }
        }
    } else {
        Write-Host "‚úÖ Nenhuma altera√ß√£o pendente" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel verificar status do Git" -ForegroundColor Yellow
}

# Fazer push para GitHub (se necess√°rio)
Write-Host "`nüì§ Verificando push para GitHub..." -ForegroundColor Yellow
try {
    $gitRemote = git remote -v 2>$null
    if ($gitRemote -match "origin") {
        Write-Host "‚úÖ Remote origin configurado" -ForegroundColor Green
        
        $push = Read-Host "Deseja fazer push para GitHub? (s/n)"
        if ($push -eq "s" -or $push -eq "S") {
            Write-Host "üì§ Fazendo push..." -ForegroundColor Yellow
            git push origin master
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Push realizado!" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Falha no push!" -ForegroundColor Red
                exit 1
            }
        }
    } else {
        Write-Host "‚ö†Ô∏è Remote origin n√£o configurado" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel verificar remote do Git" -ForegroundColor Yellow
}

# Deploy no Vercel
Write-Host "`nüöÄ Iniciando deploy no Vercel..." -ForegroundColor Yellow
Write-Host "   Isso pode levar alguns minutos..." -ForegroundColor Yellow

try {
    # Deploy com confirma√ß√£o autom√°tica
    $deployResult = vercel --prod --yes 2>&1
    $deployOutput = $deployResult | Out-String
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Deploy realizado com sucesso!" -ForegroundColor Green
        Write-Host "`nüìä Resultado do Deploy:" -ForegroundColor Cyan
        Write-Host $deployOutput -ForegroundColor White
        
        # Extrair URL do deploy
        if ($deployOutput -match "https://[^\s]+") {
            $deployUrl = $matches[0]
            Write-Host "`nüåê URL do Deploy: $deployUrl" -ForegroundColor Green
            Write-Host "   Abra no navegador para testar!" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå Falha no deploy!" -ForegroundColor Red
        Write-Host "`nüìä Erro do Deploy:" -ForegroundColor Red
        Write-Host $deployOutput -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erro durante o deploy: $_" -ForegroundColor Red
    exit 1
}

# Verificar status do deploy
Write-Host "`nüîç Verificando status do deploy..." -ForegroundColor Yellow
try {
    $vercelStatus = vercel ls 2>$null
    Write-Host "üìã Projetos no Vercel:" -ForegroundColor Cyan
    Write-Host $vercelStatus -ForegroundColor White
} catch {
    Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel verificar status" -ForegroundColor Yellow
}

# Instru√ß√µes finais
Write-Host "`nüéâ Deploy Conclu√≠do!" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Cyan
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "1. Configure as vari√°veis de ambiente no Vercel Dashboard" -ForegroundColor White
Write-Host "2. Teste os endpoints da API" -ForegroundColor White
Write-Host "3. Configure o Google Drive se necess√°rio" -ForegroundColor White
Write-Host "4. Monitore os logs no Vercel Dashboard" -ForegroundColor White

Write-Host "`nüîó Links √∫teis:" -ForegroundColor Yellow
Write-Host "‚Ä¢ Vercel Dashboard: https://vercel.com/dashboard" -ForegroundColor White
Write-Host "‚Ä¢ Documenta√ß√£o: https://vercel.com/docs" -ForegroundColor White
Write-Host "‚Ä¢ Suporte: https://vercel.com/support" -ForegroundColor White

Write-Host "`n‚ú® Deploy realizado com sucesso!" -ForegroundColor Green